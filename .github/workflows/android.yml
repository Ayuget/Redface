name: Android CI

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master", "develop" ]
  release:
    types: [ created ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'jetbrains'
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup build tool version variable
        shell: bash
        run: |
          BUILD_TOOL_VERSION=$(ls /usr/local/lib/android/sdk/build-tools/ | tail -n 1)
          echo "BUILD_TOOL_VERSION=$BUILD_TOOL_VERSION" >> $GITHUB_ENV
          echo Last build tool version is: $BUILD_TOOL_VERSION

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          # Only write to the cache for builds on the 'master' and 'develop' branches. (Default is 'main' only.)
          # Builds on other branches will only read existing entries from the cache.
          cache-read-only: ${{ github.ref != 'refs/heads/master' && github.ref != 'refs/heads/develop' }}

      - name: Execute Gradle build
        run: ./gradlew build

      - name: Assemble beta
        if: github.event_name == 'release' && github.event.action == 'created'
        run: ./gradlew assembleBeta

      - uses: r0adkll/sign-android-release@v1
        if: github.event_name == 'release' && github.event.action == 'created'
        name: Sign app APK
        # ID used to access action output
        id: sign_app
        with:
          releaseDirectory: app/build/outputs/apk/beta
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOL_VERSION }}

      - uses: actions/upload-artifact@v4
        if: github.event_name == 'release' && github.event.action == 'created'
        with:
          name: Signed app bundle
          path: ${{steps.sign_app.outputs.signedReleaseFile}}

      - name: Download artifact
        if: github.event_name == 'release' && github.event.action == 'created'
        uses: actions/download-artifact@v4
        with:
          name: Signed app bundle
          path: extracted

      - name: Rename APK
        if: github.event_name == 'release' && github.event.action == 'created'
        run: |
          mkdir renamed
          apk_file=$(find extracted -name '*.apk' | head -n 1)
          echo "Found APK: $apk_file"
          cp "$apk_file" renamed/redface-beta-${{ github.event.release.tag_name }}.apk

      - name: Upload to GitHub Release
        if: github.event_name == 'release' && github.event.action == 'created'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "$GITHUB_REF_NAME" renamed/redface-beta-${{ github.event.release.tag_name }}.apk --clobber
